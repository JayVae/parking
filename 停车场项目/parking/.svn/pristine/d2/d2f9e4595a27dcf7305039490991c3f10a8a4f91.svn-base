package com.hu.parking.controller.parkingSpace;

import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import com.hu.parking.common.Page;
import com.hu.parking.common.ResultCode;
import com.hu.parking.entity.Parkinglot;
import com.hu.parking.entity.Parkinglotslice;
import com.hu.parking.entity.Permissions;
import com.hu.parking.service.parkingSpace.ParkinglotService;
import com.hu.parking.service.parkingSpace.ParkinglotsliceService;
import com.hu.parking.service.system.PermissionsService;
import com.hu.parking.util.Identities;

@Controller
@RequestMapping(value = "/parkinglot")
public class ParkinglotController {

	@Autowired
	ParkinglotService parkinglotService;

	@Autowired
	ParkinglotsliceService parkinglotsliceService;

	@Autowired
	Parkinglot parkinglot;

	@Autowired
	Parkinglotslice parkinglotslice;

	@RequestMapping(value = "")
	public String parkinglotList() {
		return "parkingSpace/parkinglotList";
	}

	@RequestMapping(value = "/list")
	@ResponseBody
	public Map<String, Object> list(Page page) {
		return parkinglotService.pagedByParams(page);
	}

	@RequestMapping(value = "/parkinglots")
	@ResponseBody
	public List<Parkinglot> parkinglots(String type, String state) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("type", type);
		params.put("state", state);
		List<Parkinglot> parkinglots = parkinglotService.findByParams(params);
		return parkinglots;
	}

	@RequestMapping(value = "/info")
	public String info() {
		return "parkingSpace/parkinglotInfo";
	}

	@RequestMapping(value = "/insert")
	@ResponseBody
	public Map<String, Object> insert(Parkinglot parkinglot) {
		Map<String, Object> result = new HashMap<String, Object>();
		parkinglotService.insertSelective(parkinglot);
		result.put("result", ResultCode.SUCCESS);
		result.put("resultMsg", "添加停车场成功！");
		return result;
	}

	@RequestMapping(value = "/{parkinglotid}/edit")
	@ResponseBody
	public Parkinglot edit(@PathVariable("parkinglotid") Integer parkinglotid) {
		return parkinglotService.selectByPrimaryKey(parkinglotid);
	}

	@RequestMapping(value = "/update", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> update(Parkinglot parkinglot) {
		Map<String, Object> result = new HashMap<String, Object>();
		int row = parkinglotService.updateByPrimaryKeySelective(parkinglot);
		if (row == 1) {
			result.put("result", ResultCode.SUCCESS);
			result.put("resultMsg", "修改停车场成功！");
		} else {
			result.put("result", ResultCode.FAILURE);
			result.put("resultMsg", "该停车场已不存在！");
		}
		return result;
	}

	@RequestMapping(value = "/{parkinglotid}/view")
	@ResponseBody
	public Parkinglot view(@PathVariable("parkinglotid") Integer parkinglotid) {
		parkinglot = parkinglotService.selectByPrimaryKey(parkinglotid);
		return parkinglot;
	}

	@RequestMapping(value = "/{parkinglotid}/delete")
	@ResponseBody
	public Map<String, Object> delete(
			@PathVariable("parkinglotid") Integer parkinglotid) {
		Map<String, Object> result = new HashMap<String, Object>();
		int row = parkinglotService.deleteByPrimaryKey(parkinglotid);
		if (row == 1) {
			result.put("result", ResultCode.SUCCESS);
			result.put("resultMsg", "删除停车场成功！");
		} else {
			result.put("result", ResultCode.FAILURE);
			result.put("resultMsg", "该停车场已不存在！");
		}
		return result;
	}

	@RequestMapping(value = "/isexist")
	@ResponseBody
	public String isExist(String parkinglotname, Integer parkinglotid) {
		int result = parkinglotService.findByKeyCount("parkinglotname",
				parkinglotname, "parkinglotid", parkinglotid);
		if (result == 0) {
			return ResultCode.UNEXIST;
		} else {
			return ResultCode.EXIST;
		}
	}

	@RequestMapping(value = "slice/insert")
	@ResponseBody
	public Map<String, Object> insertSlice(Parkinglotslice parkinglotslice) {
		Map<String, Object> result = new HashMap<String, Object>();
		parkinglotsliceService.insertSelective(parkinglotslice);
		result.put("result", ResultCode.SUCCESS);
		result.put("resultMsg", "添加停车场分层成功！");
		return result;
	}

	@RequestMapping(value = "/slices")
	@ResponseBody
	public List<Parkinglotslice> parkinglotslices(String parkinglotid) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("parkinglotid", parkinglotid);
		List<Parkinglotslice> parkinglotslices = parkinglotsliceService
				.findByParams(params);
		return parkinglotslices;
	}

	@RequestMapping(value = "slice/info")
	public String sliceinfo() {
		return "parkingSpace/parkinglotsliceInfo";
	}

	@RequestMapping(value = "slice/update", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> updateSlice(Parkinglotslice parkinglotslice) {
		Map<String, Object> result = new HashMap<String, Object>();
		int row = parkinglotsliceService
				.updateByPrimaryKeySelective(parkinglotslice);
		if (row == 1) {
			result.put("result", ResultCode.SUCCESS);
			result.put("resultMsg", "修改停车场分层成功！");
		} else {
			result.put("result", ResultCode.FAILURE);
			result.put("resultMsg", "该停车场已分层不存在！");
		}
		return result;
	}

	@RequestMapping(value = "slice/{parkinglotsliceid}/delete")
	@ResponseBody
	public Map<String, Object> deleteSlice(
			@PathVariable("parkinglotsliceid") Integer parkinglotsliceid) {
		Map<String, Object> result = new HashMap<String, Object>();
		int row = parkinglotsliceService.deleteByPrimaryKey(parkinglotsliceid);
		if (row == 1) {
			result.put("result", ResultCode.SUCCESS);
			result.put("resultMsg", "删除停车场分层成功！");
		} else {
			result.put("result", ResultCode.FAILURE);
			result.put("resultMsg", "该停车场分层已不存在！");
		}
		return result;
	}

	@RequestMapping(value = "slice/isexist")
	@ResponseBody
	public String isExistSlice(String slicename, Integer parkinglotsliceid) {
		int result = parkinglotsliceService.findByKeyCount("slicename",
				slicename, "parkinglotsliceid", parkinglotsliceid);
		if (result == 0) {
			return ResultCode.UNEXIST;
		} else {
			return ResultCode.EXIST;
		}
	}

	@RequestMapping("slicemap/upload")
	@ResponseBody
	public String slicemapUpload(CommonsMultipartFile[] files,
			HttpServletRequest request) {
		/** 构建图片保存的目录 **/
		String logoPathDir = "/files";
		/** 得到图片保存目录的真实路径 **/
		String logoRealPathDir = request.getSession().getServletContext()
				.getRealPath(logoPathDir);
		/** 根据真实路径创建目录 **/
		File logoSaveFile = new File(logoRealPathDir);
		if (!logoSaveFile.exists()) {
			logoSaveFile.mkdirs();
		}

		for (int i = 0; i < files.length; i++) {
			System.out.println("fileName---------->"
					+ files[i].getOriginalFilename());

			if (!files[i].isEmpty()) {
				int pre = (int) System.currentTimeMillis();
				try {
					String filename = files[i].getOriginalFilename();
					// 后缀名
					String suffixName = filename.substring(filename
							.lastIndexOf("."));
					// 重命名上传后的文件名
					String logFilename = Identities.uuid2() + suffixName;
					// 拼成完整的文件保存路径加文件
					String newFilename = logoRealPathDir + File.separator+ logFilename;
					File file = new File(newFilename);
					files[i].transferTo(file);

				} catch (Exception e) {
					e.printStackTrace();
					System.out.println("上传出错");
				}
			}
		}
		return "success";
	}
}
