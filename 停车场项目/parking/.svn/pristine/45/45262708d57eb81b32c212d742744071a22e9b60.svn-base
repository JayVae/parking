package com.hu.parking.api.parkingSpace;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.joda.time.DateTime;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.fasterxml.jackson.databind.JavaType;
import com.hu.parking.common.ResultCode;
import com.hu.parking.entity.Parkingplacefreetime;
import com.hu.parking.entity.Parkingplaceftb;
import com.hu.parking.entity.Ppftbuserecord;
import com.hu.parking.service.parkingSpace.ParkinglotsliceService;
import com.hu.parking.service.parkingSpace.ParkingplaceService;
import com.hu.parking.service.parkingSpace.ParkingplacefreetimeService;
import com.hu.parking.service.parkingSpace.ParkingplaceftbService;
import com.hu.parking.service.parkingSpace.PpftbuserecordService;
import com.hu.parking.util.JsonBinder;

/**
 * 车位空闲时间
 * @author leeyuan
 *
 */
@Controller
@RequestMapping(value = "/api/parkingplacefreetime")
public class ParkingplacefreetimeAPI {

	@Autowired
	ParkingplacefreetimeService parkingplacefreetimeService;

	@Autowired
	ParkingplaceftbService parkingplaceftbService;
	
	@Autowired
	PpftbuserecordService ppftbuserecordService;
	
	@Autowired
	ParkingplaceService parkingplaceService;

	@Autowired
	ParkinglotsliceService parkinglotsliceService;

	
	private static JsonBinder jsonBinder = JsonBinder.nonDefaultMapper();  
	
	
	
	
	@RequestMapping(value = "/list")
	@ResponseBody
	public List<Parkingplacefreetime> findParkingplaceft(String orduserid, String parkingplaceid, String freedate, String pflag) {
		Map<String, Object> paramsMap = new HashMap<String, Object>();
		paramsMap.put("orduserid", orduserid);
		paramsMap.put("parkingplaceid", parkingplaceid);
		List<Date> freedates = null;
		if (freedate != null) {
			String[] freedateStrings = freedate.split(",");
			freedates = new ArrayList<Date>();
			for (int i = 0; i < freedateStrings.length; i++) {
				Date date = DateTime.parse(freedateStrings[i]).toDate();
				freedates.add(date);
			}
			paramsMap.put("freedates", freedates);
		}else {
			if ("h".equals(pflag)) {
				paramsMap.put("hflag", pflag);
			} else if ("c".equals(pflag)) {
				paramsMap.put("cflag", pflag);
			} else if ("w".equals(pflag)) {
				paramsMap.put("wflag", pflag);
			} 
			paramsMap.put("currentdate", new Date());
		}
		
		
		List<Parkingplacefreetime> ParkingplacefreetimeList = parkingplacefreetimeService.findbyNParam(paramsMap);
		return ParkingplacefreetimeList;
	}

	
	
	/**
	 * 用户发布车位空闲时间
	 * @param params
	 * @return
	 */
	@RequestMapping(value = "/insert")
	@ResponseBody
	public Map<String, Object> insert(String parkingplacefreetime, String parkingplaceftbs, String freeDate) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		try {
			int result = 0;
			if (parkingplacefreetime != null && !"".equals(parkingplacefreetime) && parkingplaceftbs != null && !"".equals(parkingplaceftbs)) {
				Parkingplacefreetime parkingplacefreetimeBean =  jsonBinder.fromJson(parkingplacefreetime, Parkingplacefreetime.class);
				JavaType javaType = jsonBinder.contructCollectionType(List.class, Parkingplaceftb.class);
				List<Parkingplaceftb> parkingplaceftbListBean = jsonBinder.fromJson(parkingplaceftbs, javaType);
				String[] freeDataN = jsonBinder.fromJson(freeDate, String[].class);
				result = parkingplacefreetimeService.addParkingplacefreetime(parkingplacefreetimeBean, parkingplaceftbListBean,freeDataN);
			}
			if (result == 0) {
				resultMap.put("result", ResultCode.FAILURE);
				resultMap.put("resultMsg", "发布车位失败！");
			}else {
				resultMap.put("result", ResultCode.SUCCESS);
				resultMap.put("resultMsg", "发布车位成功！");
			}
		} catch (Exception e) {
			resultMap.put("result", ResultCode.ERROR);
			resultMap.put("resultMsg", "发布车位错误！");
		}
		return resultMap;
	}

	
	/**
	 * 查询某个已发布空闲车位的详细
	 * @param params
	 * @return
	 */
	@RequestMapping(value = "/detail")
	@ResponseBody
	public Parkingplacefreetime detail(String parkingplaceid, String freedata) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("parkingplaceid", parkingplaceid);
		params.put("freedata", freedata);
		List<Parkingplacefreetime> parkingplacefreetimeList = parkingplacefreetimeService.findByParams(params);
		Parkingplacefreetime parkingplacefreetime = null;
		if (parkingplacefreetimeList != null && parkingplacefreetimeList.size() > 0) {
			parkingplacefreetime = parkingplacefreetimeList.get(0);
			params.clear();
			params.put("parkingplacefreetimeid", parkingplacefreetime.getParkingplacefreetimeid());
			List<Parkingplaceftb> parkingplaceftbList = parkingplaceftbService.findByParams(params);
			params.clear();
			params.put("parkingplaceftbList", parkingplaceftbList);
			List<Ppftbuserecord> ppftbuserecordList = ppftbuserecordService.findByParams(params);
			for (int i = 0; i < parkingplaceftbList.size(); i++) {
				Parkingplaceftb parkingplaceftb = parkingplaceftbList.get(i);
				List<Ppftbuserecord> ppftbuserecordListNew = new ArrayList<Ppftbuserecord>();
				for (int j = 0; j < ppftbuserecordList.size(); j++) {
					Ppftbuserecord ppftbuserecord = ppftbuserecordList.get(j);
					if (parkingplaceftb.getParkingplaceftbid().equals(ppftbuserecord.getParkingplaceftbid())) {
						ppftbuserecordListNew.add(ppftbuserecord);
					}
				}
				parkingplaceftb.setPpftbuserecordList(ppftbuserecordListNew);
			}
			parkingplacefreetime.setParkingplaceftbList(parkingplaceftbList);
		}
		
		
		return parkingplacefreetime;
	}
	
	@RequestMapping(value = "/search")
	@ResponseBody
	public List<Parkingplacefreetime> searchParkingplaceft(String parkinglotaddress, String parkinglotname, 
			String begintime, String endtime, Double usehours) {
		Map<String, Object> paramsMap = new HashMap<String, Object>();
		paramsMap.put("parkinglotaddress", parkinglotaddress);
		paramsMap.put("parkinglotname", parkinglotname);
		if (begintime!= null && !"".equals(begintime)) {
			paramsMap.put("begintime", DateTime.parse(begintime).toDate());
		}else {
			paramsMap.put("begintime", new Date());
		}
		if (endtime!= null && !"".equals(endtime)) {
			paramsMap.put("endtime", DateTime.parse(endtime).toDate());
		}
		
		paramsMap.put("usehours", usehours);
		paramsMap.put("sortName", "price");
		paramsMap.put("sortOrder", "asc");
		List<Parkingplacefreetime> ParkingplacefreetimeList = parkingplacefreetimeService.findbyNParam(paramsMap);
		return ParkingplacefreetimeList;
	}
}
