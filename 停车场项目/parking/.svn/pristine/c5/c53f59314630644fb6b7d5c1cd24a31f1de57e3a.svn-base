package com.hu.parking.service.parkingSpace.impl;

import java.text.ParseException;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang3.time.DateUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.hu.parking.dao.FreetimebucketMapper;
import com.hu.parking.dao.FreetimebuckettmpMapper;
import com.hu.parking.dao.PpftbuserecordMapper;
import com.hu.parking.dao.parkingSpace.ParkingplacefreetimeMapper;
import com.hu.parking.dao.parkingSpace.ParkingplaceftbMapper;
import com.hu.parking.entity.Freetimebucket;
import com.hu.parking.entity.Freetimebuckettmp;
import com.hu.parking.entity.Parkingplacefreetime;
import com.hu.parking.entity.Parkingplaceftb;
import com.hu.parking.entity.Ppftbuserecord;
import com.hu.parking.service.base.BaseServiceImpl;
import com.hu.parking.service.parkingSpace.FreetimebuckettmpService;
import com.hu.parking.service.parkingSpace.ParkingplacefreetimeService;
import com.hu.parking.util.Identities;

@Service("parkingplacefreetimeService")
public class ParkingplacefreetimeServiceImpl extends BaseServiceImpl<Parkingplacefreetime> implements ParkingplacefreetimeService {
	
	@Autowired
	ParkingplacefreetimeMapper parkingplacefreetimeMapper;
	
	@Autowired
	ParkingplaceftbMapper parkingplaceftbMapper;
	
	@Autowired
	PpftbuserecordMapper ppftbuserecordMapper;
	
	public int addParkingplacefreetime(Parkingplacefreetime parkingplacefreetime, List<Parkingplaceftb> parkingplaceftbList, String[] freeDate){
		Integer result = 0;
		for (int j = 0; j < freeDate.length; j++) {
			String parkingplacefreetimeid = Identities.uuid();
			parkingplacefreetime.setParkingplacefreetimeid(parkingplacefreetimeid);
			Date date = null;
			try {
				date = DateUtils.parseDate(freeDate[j], "yyyy-MM-dd");
			} catch (ParseException e) {
				e.printStackTrace();
			}
			parkingplacefreetime.setFreedate(date);
			result = parkingplacefreetimeMapper.insertSelective(parkingplacefreetime);
			if (result == 1) {
				for (int i = 0; i < parkingplaceftbList.size(); i++) {
					Parkingplaceftb parkingplaceftb = parkingplaceftbList.get(i);
					parkingplaceftb.setParkingplacefreetimeid(parkingplacefreetimeid);
					String parkingplaceftbid = Identities.uuid();
					parkingplaceftb.setParkingplaceftbid(parkingplaceftbid);
					result = parkingplaceftbMapper.insertSelective(parkingplaceftb);
					if (result == 1) {
						Integer endHours= parkingplaceftb.getFreetimebucketend().getHours();
						Integer beginHours= parkingplaceftb.getFreetimebucketbegin().getHours();
						Ppftbuserecord ppftbuserecord = null;
						for (Integer k = beginHours; k <= endHours ; k++) {
							ppftbuserecord = new Ppftbuserecord();
							ppftbuserecord.setParkingplaceftbid(parkingplaceftbid);
							ppftbuserecord.setPpftbuserecordid(Identities.uuid());
							try {
								ppftbuserecord.setPpftbtime(DateUtils.parseDate(k.toString(), "HH"));
							} catch (ParseException e) {
								e.printStackTrace();
							}
							ppftbuserecord.setIsused("0");
							ppftbuserecordMapper.insertSelective(ppftbuserecord);
						}
						
					}
				}
			}
		}
		return result;
	}

}
