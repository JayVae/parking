package com.hu.parking.api.parkingSpace;

import java.io.IOException;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpRequest;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.hu.parking.common.Page;
import com.hu.parking.common.ResultCode;
import com.hu.parking.entity.Freetimebuckettmp;
import com.hu.parking.entity.Freetimebucket;
import com.hu.parking.entity.Parkinglot;
import com.hu.parking.entity.Parkingplacefreetime;
import com.hu.parking.entity.Parkingplaceftb;
import com.hu.parking.entity.Permissions;
import com.hu.parking.entity.Ppftbuserecord;
import com.hu.parking.service.parkingSpace.FreetimebuckettmpService;
import com.hu.parking.service.parkingSpace.FreetimebucketService;
import com.hu.parking.service.parkingSpace.ParkingplacefreetimeService;
import com.hu.parking.service.parkingSpace.ParkingplaceftbService;
import com.hu.parking.service.parkingSpace.PpftbuserecordService;
import com.hu.parking.service.parkingSpace.UploadService;
import com.hu.parking.service.system.PermissionsService;
import com.hu.parking.util.Identities;
import com.hu.parking.util.JsonBinder;

/**
 * 车位空闲时间
 * @author leeyuan
 *
 */
@Controller
@RequestMapping(value = "/api/parkingplacefreetime")
public class ParkingplacefreetimeAPI {

	@Autowired
	ParkingplacefreetimeService parkingplacefreetimeService;

	@Autowired
	ParkingplaceftbService parkingplaceftbService;
	
	@Autowired
	PpftbuserecordService ppftbuserecordService;

	
	private static JsonBinder jsonBinder = JsonBinder.nonDefaultMapper();  
	
	/**
	 * 
	 * @return
	 */
//	@RequestMapping(value = "/list")
//	@ResponseBody
//	public List<Freetimebuckettmp> list(HttpServletRequest request,Integer orduserid) {
////		Map<String, Object> params = new HashMap<String, Object>();
//////		HttpSession session = request.getSession();
//////		Integer orduserid = Integer.valueOf(session.getAttribute("orduserid").toString());
////		params.put("orduserid", orduserid);
////		 
////		List<Freetimebuckettmp> freetimebuckettmpList = freetimebuckettmpService.findByParams(params);
////		params.clear();
////		params.put("freetimebuckettmps", freetimebuckettmpList);
////		List<Freetimebucket> freetimebucketList = freetimebucketService.findByParams(params);
////		for (int i = 0; i < freetimebuckettmpList.size(); i++) {
////			Freetimebuckettmp freetimebuckettmp = freetimebuckettmpList.get(i);
////			List<Freetimebucket> freetimebucketListNew = new ArrayList<Freetimebucket>();
////			for (int j = 0; j < freetimebucketList.size(); j++) {
////				Freetimebucket freetimebucket = freetimebucketList.get(j);
////				if (freetimebucket.getFreetimetmpid() == freetimebuckettmp.getFreetimebuckettmpid()) {
////					freetimebucketListNew.add(freetimebucket);
////				}
////			}
////			freetimebuckettmp.setFreetimebucketList(freetimebucketListNew);
////		}
//		return freetimebuckettmpList;
//	}

	
	
	/**
	 * 用户发布车位空闲时间
	 * @param params
	 * @return
	 */
	@RequestMapping(value = "/insert")
	@ResponseBody
	public Map<String, Object> insert(String parkingplacefreetime, String parkingplaceftbs, String freeDate) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		try {
			int result = 0;
			if (parkingplacefreetime != null && !"".equals(parkingplacefreetime) && parkingplaceftbs != null && !"".equals(parkingplaceftbs)) {
				Parkingplacefreetime parkingplacefreetimeBean =  jsonBinder.fromJson(parkingplacefreetime, Parkingplacefreetime.class);
				JavaType javaType = jsonBinder.contructCollectionType(List.class, Parkingplaceftb.class);
				List<Parkingplaceftb> parkingplaceftbListBean = jsonBinder.fromJson(parkingplaceftbs, javaType);
				String[] freeDataN = jsonBinder.fromJson(freeDate, String[].class);
				result = parkingplacefreetimeService.addParkingplacefreetime(parkingplacefreetimeBean, parkingplaceftbListBean,freeDataN);
			}
			if (result == 0) {
				resultMap.put("result", ResultCode.FAILURE);
				resultMap.put("resultMsg", "发布车位失败！");
			}else {
				resultMap.put("result", ResultCode.SUCCESS);
				resultMap.put("resultMsg", "发布车位成功！");
			}
		} catch (Exception e) {
			resultMap.put("result", ResultCode.ERROR);
			resultMap.put("resultMsg", "发布车位错误！");
		}
		return resultMap;
	}

	
	/**
	 * 查询某个已发布空闲车位的详细
	 * @param params
	 * @return
	 */
	@RequestMapping(value = "/detail")
	@ResponseBody
	public Parkingplacefreetime detail(String parkingplaceid, String freedata) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("parkingplaceid", parkingplaceid);
		params.put("freedata", freedata);
		List<Parkingplacefreetime> parkingplacefreetimeList = parkingplacefreetimeService.findByParams(params);
		Parkingplacefreetime parkingplacefreetime = null;
		if (parkingplacefreetimeList != null && parkingplacefreetimeList.size() > 0) {
			parkingplacefreetime = parkingplacefreetimeList.get(0);
			List<Parkingplaceftb> parkingplaceftbList = parkingplaceftbService.findByKey("parkingplacefreetimeid", parkingplacefreetime.getParkingplacefreetimeid());
			params.clear();
			params.put("parkingplaceftbList", parkingplaceftbList);
			List<Ppftbuserecord> ppftbuserecordList = ppftbuserecordService.findByParams(params);
			for (int i = 0; i < parkingplaceftbList.size(); i++) {
				Parkingplaceftb parkingplaceftb = parkingplaceftbList.get(i);
				List<Ppftbuserecord> ppftbuserecordListNew = new ArrayList<Ppftbuserecord>();
				for (int j = 0; j < ppftbuserecordList.size(); j++) {
					Ppftbuserecord ppftbuserecord = ppftbuserecordList.get(j);
					if (parkingplaceftb.getParkingplaceftbid().equals(ppftbuserecord.getParkingplaceftbid())) {
						ppftbuserecordListNew.add(ppftbuserecord);
					}
				}
				parkingplaceftb.setPpftbuserecordList(ppftbuserecordListNew);
			}
			parkingplacefreetime.setParkingplaceftbList(parkingplaceftbList);
		}
		
		
		return parkingplacefreetime;
	}
	
	
}
