package com.hu.parking.api.parkingSpace;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.fasterxml.jackson.databind.JavaType;
import com.hu.parking.common.ResultCode;
import com.hu.parking.entity.Freetimebucket;
import com.hu.parking.entity.Freetimebuckettmp;
import com.hu.parking.service.parkingSpace.FreetimebucketService;
import com.hu.parking.service.parkingSpace.FreetimebuckettmpService;
import com.hu.parking.util.JsonBinder;

/**
 * 空闲时间模板
 * @author leeyuan
 *
 */
@Controller
@RequestMapping(value = "/api/freetimebuckettmp")
public class FreetimebuckettmpAPI {

	@Autowired
	FreetimebuckettmpService freetimebuckettmpService;

	@Autowired
	FreetimebucketService freetimebucketService;

	@Autowired
	Freetimebuckettmp freetimebuckettmp;

	@Autowired
	Freetimebucket freetimebucket;
	
	private static JsonBinder jsonBinder = JsonBinder.nonDefaultMapper();  
	
	/**
	 * 用户个人的空闲时段模板
	 * @return
	 */
	@RequestMapping(value = "/list")
	@ResponseBody
	public List<Freetimebuckettmp> list(String orduserid) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("orduserid", orduserid);
		List<Freetimebuckettmp> freetimebuckettmpList = freetimebuckettmpService.findByParams(params);
		params.clear();
		params.put("freetimebuckettmps", freetimebuckettmpList);
		List<Freetimebucket> freetimebucketList = freetimebucketService.findByParams(params);
		for (int i = 0; i < freetimebuckettmpList.size(); i++) {
			Freetimebuckettmp freetimebuckettmp = freetimebuckettmpList.get(i);
			List<Freetimebucket> freetimebucketListNew = new ArrayList<Freetimebucket>();
			for (int j = 0; j < freetimebucketList.size(); j++) {
				Freetimebucket freetimebucket = freetimebucketList.get(j);
				if (freetimebucket.getFreetimetmpid().equals(freetimebuckettmp.getFreetimebuckettmpid())) {
					freetimebucketListNew.add(freetimebucket);
				}
			}
			freetimebuckettmp.setFreetimebucketList(freetimebucketListNew);
		}
		return freetimebuckettmpList;
	}

	
	
	/**
	 * 添加空闲时段模板
	 * @param params
	 * @return
	 */
	@RequestMapping(value = "/insert")
	@ResponseBody
	public Map<String, Object> insert(String freetimebuckettmp, String freetimebucketList) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		try {
			int result = 0;
			if (freetimebuckettmp != null && !"".equals(freetimebuckettmp) && freetimebucketList != null && !"".equals(freetimebucketList)) {
				Freetimebuckettmp freetimebuckettmpBean =  jsonBinder.fromJson(freetimebuckettmp, Freetimebuckettmp.class);
				JavaType javaType = jsonBinder.contructCollectionType(List.class, Freetimebucket.class);
				List<Freetimebucket> freetimebucketListBean = (List<Freetimebucket>) jsonBinder.fromJson(freetimebucketList, javaType);
				result = freetimebuckettmpService.addFreetimebuckettmp(freetimebuckettmpBean, freetimebucketListBean);
			}
			if (result == 0) {
				resultMap.put("result", ResultCode.FAILURE);
				resultMap.put("resultMsg", "添加空闲时段模板失败！");
			}else {
				resultMap.put("result", ResultCode.SUCCESS);
				resultMap.put("resultMsg", "添加空闲时段模板成功！");
			}
		} catch (Exception e) {
			resultMap.put("result", ResultCode.ERROR);
			resultMap.put("resultMsg", "添加空闲时段模板出现错误！");
		}
		return resultMap;
	}
	
	
	/**
	 * 删除空闲时段模板
	 * @param params
	 * @return
	 */
	@RequestMapping(value = "/delete")
	@ResponseBody
	public Map<String, Object> delete(String freetimebuckettmpid) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		try {
			int result = freetimebuckettmpService.deleteFreetimebuckettmp(freetimebuckettmpid);
			if (result == 0) {
				resultMap.put("result", ResultCode.FAILURE);
				resultMap.put("resultMsg", "删除空闲时段模板失败！");
			}else {
				resultMap.put("result", ResultCode.SUCCESS);
				resultMap.put("resultMsg", "删除空闲时段模板成功！");
			}
		} catch (Exception e) {
			resultMap.put("result", ResultCode.ERROR);
			resultMap.put("resultMsg", "添加空闲时段模板出现错误！");
		}
		return resultMap;
	}

	/**
	 * 修改空闲时段模板
	 * @param params
	 * @return
	 */
	@RequestMapping(value = "/update")
	@ResponseBody
	public Map<String, Object> update(String freetimebuckettmp, String freetimebucketList) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		try {
			int result = 0;
			if (freetimebuckettmp != null && !"".equals(freetimebuckettmp) && freetimebucketList != null && !"".equals(freetimebucketList)) {
				Freetimebuckettmp freetimebuckettmpBean =  jsonBinder.fromJson(freetimebuckettmp, Freetimebuckettmp.class);
				JavaType javaType = jsonBinder.contructCollectionType(List.class, Freetimebucket.class);
				List<Freetimebucket> freetimebucketListBean = (List<Freetimebucket>) jsonBinder.fromJson(freetimebucketList, javaType);
				result = freetimebuckettmpService.updateFreetimebuckettmp(freetimebuckettmpBean, freetimebucketListBean);
			}
			if (result == 0) {
				resultMap.put("result", ResultCode.FAILURE);
				resultMap.put("resultMsg", "修改空闲时段模板失败！");
			}else {
				resultMap.put("result", ResultCode.SUCCESS);
				resultMap.put("resultMsg", "修改空闲时段模板成功！");
			}
		} catch (Exception e) {
			resultMap.put("result", ResultCode.ERROR);
			resultMap.put("resultMsg", "修改空闲时段模板出现错误！");
		}
		return resultMap;
	}
	
}
