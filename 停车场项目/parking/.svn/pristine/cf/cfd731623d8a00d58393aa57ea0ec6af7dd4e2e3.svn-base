package com.hu.parking.api.parkingSpace;

import java.io.IOException;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpRequest;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.hu.parking.common.Page;
import com.hu.parking.common.ResultCode;
import com.hu.parking.entity.Freetimebuckettmp;
import com.hu.parking.entity.Freetimebucket;
import com.hu.parking.entity.Parkinglot;
import com.hu.parking.entity.Permissions;
import com.hu.parking.entity.Rentrecord;
import com.hu.parking.service.parkingSpace.FreetimebuckettmpService;
import com.hu.parking.service.parkingSpace.FreetimebucketService;
import com.hu.parking.service.parkingSpace.RentrecordService;
import com.hu.parking.service.parkingSpace.UploadService;
import com.hu.parking.service.system.PermissionsService;
import com.hu.parking.util.Identities;
import com.hu.parking.util.JsonBinder;

/**
 * 空闲时间模板
 * @author leeyuan
 *
 */
@Controller
@RequestMapping(value = "/api/rentrecord")
public class RentrecordAPI {

	@Autowired
	RentrecordService rentrecordService;

	@Autowired
	FreetimebucketService freetimebucketService;

	@Autowired
	Freetimebuckettmp freetimebuckettmp;

	@Autowired
	Freetimebucket freetimebucket;
	
	private static JsonBinder jsonBinder = JsonBinder.nonDefaultMapper();  
	
//	/**
//	 * 用户个人的空闲时段模板
//	 * @return
//	 */
//	@RequestMapping(value = "/list")
//	@ResponseBody
//	public List<Freetimebuckettmp> list(String orduserid) {
//		Map<String, Object> params = new HashMap<String, Object>();
//		params.put("orduserid", orduserid);
//		List<Freetimebuckettmp> freetimebuckettmpList = freetimebuckettmpService.findByParams(params);
//		params.clear();
//		params.put("freetimebuckettmps", freetimebuckettmpList);
//		List<Freetimebucket> freetimebucketList = freetimebucketService.findByParams(params);
//		for (int i = 0; i < freetimebuckettmpList.size(); i++) {
//			Freetimebuckettmp freetimebuckettmp = freetimebuckettmpList.get(i);
//			List<Freetimebucket> freetimebucketListNew = new ArrayList<Freetimebucket>();
//			for (int j = 0; j < freetimebucketList.size(); j++) {
//				Freetimebucket freetimebucket = freetimebucketList.get(j);
//				if (freetimebucket.getFreetimetmpid() == freetimebuckettmp.getFreetimebuckettmpid()) {
//					freetimebucketListNew.add(freetimebucket);
//				}
//			}
//			freetimebuckettmp.setFreetimebucketList(freetimebucketListNew);
//		}
//		return freetimebuckettmpList;
//	}

	
	
	/**
	 * 添加租用记录
	 * @param parkingplacefreetimeid 车位空闲时间ID
	 * @param usercarid 用户车辆ID
	 * @param appointmenttime 预约创建时间
	 * @param appointmentbegintime 预约开始时间
	 * @param appointmentendtime 预约结束时间
	 * @param factbegintime 实际开始时间
	 * @param parkingplaceftbs 车位空闲时间段
	 * @return
	 */
	@RequestMapping(value = "/insert")
	@ResponseBody
	public Map<String, Object> insert(Rentrecord rentrecord, String parkingplaceftbs) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		try {
			int result = 0;
			if (parkingplaceftbs != null && !"".equals(parkingplaceftbs)) {
				JavaType javaType = jsonBinder.contructCollectionType(List.class, Map.class);
				List<Map<String, String>> parkingplaceftbList = (List<Map<String, String>>) jsonBinder.fromJson(parkingplaceftbs, javaType);
//				for (int i = 0; i < parkingplaceftbList.size(); i++) {
//					
//				}
				rentrecord.setRentrecordid(Identities.uuid());
				rentrecord.setAppointmenttime(new Date());
				result = rentrecordService.insertSelective(rentrecord);
			}
			if (result == 0) {
				resultMap.put("result", ResultCode.FAILURE);
				resultMap.put("resultMsg", "停车失败！");
			}else {
				resultMap.put("result", ResultCode.SUCCESS);
				resultMap.put("resultMsg", "停车成功！");
			}
		} catch (Exception e) {
			resultMap.put("result", ResultCode.ERROR);
			resultMap.put("resultMsg", "系统出现错误！");
		}
		return resultMap;
	}

	
}
