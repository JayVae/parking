<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hu.parking.dao.PropertycompanyMapper" >
  <resultMap id="BaseResultMap" type="com.hu.parking.entity.Propertycompany" >
    <id column="propertycompanyid" property="propertycompanyid" jdbcType="INTEGER" />
    <result column="pcompanyname" property="pcompanyname" jdbcType="VARCHAR" />
    <result column="commerlicens" property="commerlicens" jdbcType="VARCHAR" />
    <result column="legalname" property="legalname" jdbcType="VARCHAR" />
    <result column="phone" property="phone" jdbcType="VARCHAR" />
    <result column="address" property="address" jdbcType="VARCHAR" />
    <result column="note" property="note" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    propertycompanyid, pcompanyname, commerlicens, legalname, phone, address, note
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from propertycompany
    where propertycompanyid = #{propertycompanyid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from propertycompany
    where propertycompanyid = #{propertycompanyid,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.hu.parking.entity.Propertycompany" >
    insert into propertycompany (propertycompanyid, pcompanyname, 
      commerlicens, legalname, phone, 
      address, note)
    values (#{propertycompanyid,jdbcType=INTEGER}, #{pcompanyname,jdbcType=VARCHAR}, 
      #{commerlicens,jdbcType=VARCHAR}, #{legalname,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, 
      #{address,jdbcType=VARCHAR}, #{note,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.hu.parking.entity.Propertycompany" >
    insert into propertycompany
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="propertycompanyid != null" >
        propertycompanyid,
      </if>
      <if test="pcompanyname != null" >
        pcompanyname,
      </if>
      <if test="commerlicens != null" >
        commerlicens,
      </if>
      <if test="legalname != null" >
        legalname,
      </if>
      <if test="phone != null" >
        phone,
      </if>
      <if test="address != null" >
        address,
      </if>
      <if test="note != null" >
        note,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="propertycompanyid != null" >
        #{propertycompanyid,jdbcType=INTEGER},
      </if>
      <if test="pcompanyname != null" >
        #{pcompanyname,jdbcType=VARCHAR},
      </if>
      <if test="commerlicens != null" >
        #{commerlicens,jdbcType=VARCHAR},
      </if>
      <if test="legalname != null" >
        #{legalname,jdbcType=VARCHAR},
      </if>
      <if test="phone != null" >
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="address != null" >
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="note != null" >
        #{note,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.hu.parking.entity.Propertycompany" >
    update propertycompany
    <set >
      <if test="pcompanyname != null" >
        pcompanyname = #{pcompanyname,jdbcType=VARCHAR},
      </if>
      <if test="commerlicens != null" >
        commerlicens = #{commerlicens,jdbcType=VARCHAR},
      </if>
      <if test="legalname != null" >
        legalname = #{legalname,jdbcType=VARCHAR},
      </if>
      <if test="phone != null" >
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="address != null" >
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="note != null" >
        note = #{note,jdbcType=VARCHAR},
      </if>
    </set>
    where propertycompanyid = #{propertycompanyid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hu.parking.entity.Propertycompany" >
    update propertycompany
    set pcompanyname = #{pcompanyname,jdbcType=VARCHAR},
      commerlicens = #{commerlicens,jdbcType=VARCHAR},
      legalname = #{legalname,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR},
      note = #{note,jdbcType=VARCHAR}
    where propertycompanyid = #{propertycompanyid,jdbcType=INTEGER}
  </update>
  <select id="selectAll" resultMap="BaseResultMap" parameterType="map" >
    select
    <include refid="Base_Column_List" />
    from propertycompany
    <if test="sortName != null" >
      order by ${sortName}
      <if test="sortOrder != null" >
        ${sortOrder}
      </if>
    </if>
  </select>
  <select id="findByParams" resultMap="BaseResultMap" parameterType="map" >
    select
    <include refid="Base_Column_List" />
    from propertycompany
    <if test="sortName != null" >
      order by ${sortName}
      <if test="sortOrder != null" >
        ${sortOrder}
      </if>
    </if>
    <if test="pageSize != null and startNum != null" >
      limit #{pageSize} offset #{startNum}
    </if>
  </select>
  <select id="findByParamsCount" resultType="int" parameterType="map" >
    select count(*) from propertycompany
  </select>
  <select id="findByKey" resultMap="BaseResultMap" parameterType="map" >
    select
    <include refid="Base_Column_List" />
    from propertycompany
    <where >
      <if test="ckey != null and cvalue != null" >
        and ${ckey} = #{cvalue}
      </if>
      <if test="pkey != null and pvalue != null" >
        and ${pkey} != #{pvalue}
      </if>
    </where>
  </select>
  <select id="findByKeyCount" resultType="int" parameterType="map" >
    select count(*) from propertycompany
    <where >
      <if test="ckey != null and cvalue != null" >
        and ${ckey} = #{cvalue}
      </if>
      <if test="pkey != null and pvalue != null" >
        and ${pkey} != #{pvalue}
      </if>
    </where>
  </select>
</mapper>