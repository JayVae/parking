package com.hu.parking.service.parkingSpace.impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.hu.parking.dao.FreetimebucketMapper;
import com.hu.parking.dao.FreetimebuckettmpMapper;
import com.hu.parking.entity.Freetimebucket;
import com.hu.parking.entity.Freetimebuckettmp;
import com.hu.parking.service.base.BaseServiceImpl;
import com.hu.parking.service.parkingSpace.FreetimebuckettmpService;
import com.hu.parking.util.Identities;

@Service("freetimebuckettmpService")
public class FreetimebuckettmpServiceImpl extends BaseServiceImpl<Freetimebuckettmp> implements FreetimebuckettmpService {
	
	@Autowired
	FreetimebuckettmpMapper freetimebuckettmpMapper;
	
	@Autowired
	FreetimebucketMapper freetimebucketMapper;
	
	public int addFreetimebuckettmp(Freetimebuckettmp freetimebuckettmp, List<Freetimebucket> freetimebucketList){
		Integer result = 0;
		String freetimetmpid = Identities.uuid();
		freetimebuckettmp.setFreetimebuckettmpid(freetimetmpid);
		result = freetimebuckettmpMapper.insertSelective(freetimebuckettmp);
		if (result == 1) {
			for (int i = 0; i < freetimebucketList.size(); i++) {
				Freetimebucket freetimebucket = freetimebucketList.get(i);
				freetimebucket.setFreetimetmpid(freetimetmpid);
				freetimebucket.setFreetimebucketid(Identities.uuid());
				result = freetimebucketMapper.insertSelective(freetimebucket);
			}
		}
		
		return result;
	}
	
	public int deleteFreetimebuckettmp(String freetimebuckettmpid){
		Integer result = 0;
		result = freetimebucketMapper.deleteByfreetimetmpid(freetimebuckettmpid);
		result = freetimebuckettmpMapper.deleteByPrimaryKey(freetimebuckettmpid);
		return result;
	}
	
	public int updateFreetimebuckettmp(Freetimebuckettmp freetimebuckettmp, List<Freetimebucket> freetimebucketList){
		Integer result = 0;
		String freetimetmpid = freetimebuckettmp.getFreetimebuckettmpid();
		result = freetimebuckettmpMapper.updateByPrimaryKeySelective(freetimebuckettmp);
		if (result == 1) {
			freetimebucketMapper.deleteByfreetimetmpid(freetimetmpid);
			for (int i = 0; i < freetimebucketList.size(); i++) {
				Freetimebucket freetimebucket = freetimebucketList.get(i);
				freetimebucket.setFreetimetmpid(freetimetmpid);
				freetimebucket.setFreetimebucketid(Identities.uuid());
				result = freetimebucketMapper.insertSelective(freetimebucket);
			}
		}
		return result;
	}
}
